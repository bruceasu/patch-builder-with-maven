/*
 * Copyright (C) 2017 Bruce Asu<bruceasu@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *  　　
 * 　　The above copyright notice and this permission notice shall
 * be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
 * OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
 * OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

package asu.patch.builder.svn;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.tmatesoft.svn.core.SVNCancelException;
import org.tmatesoft.svn.core.wc.ISVNEventHandler;
import org.tmatesoft.svn.core.wc.SVNEvent;
import org.tmatesoft.svn.core.wc.SVNEventAction;

/**
 * This class is an implementation of ISVNEventHandler intended for  processing
 * events generated by do*() methods of an SVNWCClient object. An  instance  of
 * this handler will be provided to an SVNWCClient. When  calling, for example,
 * SVNWCClient.doDelete(..) on some path, that method will  generate  an  event
 * for each 'delete' action it will perform upon every path being deleted.  And
 * this event is passed to
 * <p>ISVNEventHandler.handleEvent(SVNEvent event,  double progress)
 * <p>to notify the handler.  The  event  contains detailed  information about the
 * path, action performed upon the path and some other.
 */
public class WCEventHandler implements ISVNEventHandler {
  private static final Logger LOGGER = LoggerFactory.getLogger(WCEventHandler.class);
  
  /**
   * progress  is  currently  reserved  for future purposes and now is always
   * ISVNEventHandler.UNKNOWN
   */
  public void handleEvent(SVNEvent event, double progress) {
    /*
     * Gets the current action. An action is represented by SVNEventAction.
     */
    SVNEventAction action = event.getAction();
    if (action == SVNEventAction.ADD) {
      /*
       * The item is scheduled for addition.
       */
      LOGGER.info("A     {}", event.getFile());
      return;
    } else if (action == SVNEventAction.COPY) {
      /*
       * The  item  is  scheduled for addition  with history (copied,  in
       * other words).
       */
      LOGGER.info("A  +  {}", event.getFile());
      return;
    } else if (action == SVNEventAction.DELETE) {
      /*
       * The item is scheduled for deletion.
       */
      LOGGER.info("D     {}", event.getFile());
      return;
    } else if (action == SVNEventAction.LOCKED) {
      /*
       * The item is locked.
       */
      LOGGER.info("L     {}", event.getFile());
      return;
    } else if (action == SVNEventAction.LOCK_FAILED) {
      /*
       * Locking operation failed.
       */
      LOGGER.info("failed to lock    {}", event.getFile());
      return;
    }
  }

  /**
   * Should be implemented to check if the current operation is cancelled. If
   * it is, this method should throw an SVNCancelException.
   */
  public void checkCancelled() throws SVNCancelException {
  }

}
