/*
 * Copyright (C) 2017 Bruce Asu<bruceasu@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *  　　
 * 　　The above copyright notice and this permission notice shall
 * be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
 * OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
 * OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

package asu.patch.builder.svn;

import org.tmatesoft.svn.core.SVNCancelException;
import org.tmatesoft.svn.core.wc.ISVNEventHandler;
import org.tmatesoft.svn.core.wc.SVNEvent;
import org.tmatesoft.svn.core.wc.SVNEventAction;
import org.tmatesoft.svn.core.wc.SVNStatusType;

/**
 * This class is an implementation of ISVNEventHandler intended for  processing
 * events generated by do*() methods of an SVNUpdateClient object. An  instance
 * of this handler will be provided to  an  SVNUpdateClient. When calling,  for
 * example, SVNWCClient.doUpdate(..) on some path, that method will generate an
 * event for each 'update'/'add'/'delete'/.. action it will perform upon  every
 * path being updated. And this event is passed to
 *
 * <p>ISVNEventHandler.handleEvent(SVNEvent event,  double progress)
 *
 * <p>to notify the handler.  The  event  contains detailed  information about the
 * path, action performed upon the path and some other.
 */
public class UpdateEventHandler implements ISVNEventHandler {
  /**
   * progress  is  currently  reserved  for future purposes and now is always
   * ISVNEventHandler.UNKNOWN
   */
  public void handleEvent(SVNEvent event, double progress) {
    /*
     * Gets the current action. An action is represented by SVNEventAction.
     * In case of an update an  action  can  be  determined  via  comparing
     * SVNEvent.getAction() and SVNEventAction.UPDATE_-like constants.
     */
    SVNEventAction action = event.getAction();
    String pathChangeType = " ";
    if (action == SVNEventAction.UPDATE_ADD) {
      /*
       * the item was added
       */
      pathChangeType = "A";
    } else if (action == SVNEventAction.UPDATE_DELETE) {
      /*
       * the item was deleted
       */
      pathChangeType = "D";
    } else if (action == SVNEventAction.UPDATE_UPDATE) {
      /*
       * Find out in details what  state the item is (after  having  been
       * updated).
       *
       * Gets  the  status  of  file/directory  item   contents.  It   is
       * SVNStatusType  who contains information on the state of an item.
       */
      SVNStatusType contentsStatus = event.getContentsStatus();
      if (contentsStatus == SVNStatusType.CHANGED) {
        /*
         * the  item  was  modified in the repository (got  the changes
         * from the repository
         */
        pathChangeType = "U";
      } else if (contentsStatus == SVNStatusType.CONFLICTED) {
        /*
         * The file item is in  a  state  of Conflict. That is, changes
         * received from the repository during an update, overlap  with
         * local changes the user has in his working copy.
         */
        pathChangeType = "C";
      } else if (contentsStatus == SVNStatusType.MERGED) {
        /*
         * The file item was merGed (those  changes that came from  the
         * repository  did  not  overlap local changes and were  merged
         * into the file).
         */
        pathChangeType = "G";
      }
    } else if (action == SVNEventAction.UPDATE_EXTERNAL) {
      /*for externals definitions*/
      System.out.println("Fetching external item into '"
          + event.getFile().getAbsolutePath() + "'");
      System.out.println("External at revision " + event.getRevision());
      return;
    } else if (action == SVNEventAction.UPDATE_COMPLETED) {
      /*
       * Updating the working copy is completed. Prints out the revision.
       */
      System.out.println("At revision " + event.getRevision());
      return;
    } else if (action == SVNEventAction.ADD) {
      System.out.println("A     " + event.getFile());
      return;
    } else if (action == SVNEventAction.DELETE) {
      System.out.println("D     " + event.getFile());
      return;
    } else if (action == SVNEventAction.LOCKED) {
      System.out.println("L     " + event.getFile());
      return;
    } else if (action == SVNEventAction.LOCK_FAILED) {
      System.out.println("failed to lock    " + event.getFile());
      return;
    }

    /*
     * Now getting the status of properties of an item. SVNStatusType  also
     * contains information on the properties state.
     */
    SVNStatusType propertiesStatus = event.getPropertiesStatus();
    /*
     * At first consider properties are normal (unchanged).
     */
    String propertiesChangeType = " ";
    if (propertiesStatus == SVNStatusType.CHANGED) {
      /*
       * Properties were updated.
       */
      propertiesChangeType = "U";
    } else if (propertiesStatus == SVNStatusType.CONFLICTED) {
      /*
       * Properties are in conflict with the repository.
       */
      propertiesChangeType = "C";
    } else if (propertiesStatus == SVNStatusType.MERGED) {
      /*
       * Properties that came from the repository were  merged  with  the
       * local ones.
       */
      propertiesChangeType = "G";
    }

    /*
     * Gets the status of the lock.
     */
    String lockLabel = " ";
    SVNStatusType lockType = event.getLockStatus();

    if (lockType == SVNStatusType.LOCK_UNLOCKED) {
      /*
       * The lock is broken by someone.
       */
      lockLabel = "B";
    }

    System.out.println(pathChangeType
        + propertiesChangeType
        + lockLabel
        + "       "
        + event.getFile());
  }

  /*
   * Should be implemented to check if the current operation is cancelled. If
   * it is, this method should throw an SVNCancelException.
   */
  public void checkCancelled() throws SVNCancelException {
  }

}